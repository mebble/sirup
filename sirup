#!/usr/bin/python3

import json
import nav
import git
from shell import get_cmd

def summarise(repos_dir, should_log=False):
    repos = []
    for repo in nav.explore_repos(repos_dir):
        if should_log:
            print(f'Checking repo: {repo}')
        git_info = {
            'name': repo,
            'is_clean': git.is_clean(),
            'current_branch': git.get_current_branch(),
            'remotes': git.get_remotes(),
            'size': git.get_repo_size()
        }
        repos.append(git_info)
    return repos

def generate(repos, dest_path):
    nav.goto_dest_dir(dest_path)

    failed_clones = []
    for repo in repos:
        name = repo['name']
        remotes = repo['remotes']
        try:
            remote = remotes['origin']
        except KeyError:
            remote = remotes[list(remotes)[0]]
        fetch_url = remote['fetch']
        success = git.clone_repo(name, fetch_url)
        if not success:
            failed_clones.append(repo)

    if not failed_clones:
        return True, []

    return False, failed_clones

usage_instructions = '''
Usage: ./sirup <sub-command> <args> <flags>
<sub-command>:
    sum
        <args>:
            --repos ./repos/dir\tThe directory containing all the git repositories
        <flags>:
            --log [optional]   \tWill output logs to stdout
    gen
        <args>:
            --from ./json/file \tThe JSON file containing the output of "./sirup sum"
            --to ./dest/dir    \tThe destination directory where you want to clone the repositories
'''.strip()

if __name__ == '__main__':
    cmd, success = get_cmd()
    if not success:
        print(usage_instructions)
        exit(1)

    if cmd['name'] == 'sum':
        repos_path = cmd['args']['--repos']
        should_log = cmd['flags']['--log']
        summary = summarise(repos_path, should_log)
        json_output = json.dumps(summary)
        print(json_output)
        exit(0)

    if cmd['name'] == 'gen':
        json_path = cmd['args']['--from']
        dest_path = cmd['args']['--to']
        with open(json_path) as f:
            repos = json.load(f)
            success, failed_repos = generate(repos, dest_path)
            if not success:
                print('Failed to clone the following repos:')
                print('\n'.join([repo['name'] for repo in failed_repos]))
                exit(1)
            exit(0)

    print('This command is not yet implemented')
