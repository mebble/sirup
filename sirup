#!/usr/bin/python3

import json
import sys
from git import Git
from shell import get_cmd, run
from app import summarise, generate

usage_instructions = '''
Usage: ./sirup <sub-command> <args> <flags>
<sub-command>:
    help                       \tPrint these usage instructions
    sum                        \tSummarise git repos and print the summary in JSON to stdout
        <args>:
            --repos ./repos/dir\tThe directory containing the git repos
        <flags>:
            --log   [optional] \tWill output logs to stdout
    gen                        \tGenerate git repos from a summary file
        <args>:
            --from  ./sum/file \tPath to the summary file
            --to    ./dest/dir \tThe destination directory where you want to clone the repos
'''.strip()

if __name__ == '__main__':
    cmd, success = get_cmd(sys.argv)
    if not success:
        print(usage_instructions)
        sys.exit(1)

    name = cmd['name']
    if name == 'help':
        print(usage_instructions)
        sys.exit(0)

    git = Git(run)
    if name == 'sum':
        repos_path = cmd['args']['--repos']
        should_log = cmd['flags']['--log']
        summary = summarise(git, repos_path, should_log)
        json_output = json.dumps(summary)
        if should_log:
            print('Summary:')
        print(json_output)
        sys.exit(0)
    if name == 'gen':
        json_path = cmd['args']['--from']
        dest_path = cmd['args']['--to']
        with open(json_path) as f:
            repos = json.load(f)
            success, failed_repos = generate(git, repos, dest_path)
            if not success:
                print('Failed to clone the following repos:')
                print('\n'.join([repo['name'] for repo in failed_repos]))
                sys.exit(1)
            sys.exit(0)

    print('This command is not yet implemented')
